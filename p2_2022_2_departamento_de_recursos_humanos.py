# -*- coding: utf-8 -*-
"""P2 -2022.2 - Departamento de Recursos Humanos

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nj2eN7dmOzfFyBE2X7bd0UjcKUQ2ap8F

# Departamento de Recursos Humanos

## Análise dos dados

- Base de dados: https://www.kaggle.com/pavansubhasht/ibm-hr-analytics-attrition-dataset
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

employee_df = pd.read_csv('/content/drive/MyDrive/IA/Human_Resources.csv')

employee_df

"""Realizando análise estatística"""

employee_df.describe()

"""Verificando se há dados faltantes"""

employee_df.isnull().sum()

"""Verificando correlação entre as variáveis.
Aparentemente existe uma correção da saída do funcionário (Attrition) com o tempo de serviço (YearsAtCompany), o salário mensal (MonthlyIncome) e o nível de satisfação (JobSatisfaction)
"""

corr = employee_df.corr()
plt.figure(figsize=(10,10))
sns.heatmap(corr, annot=True, cmap='coolwarm')

employee_df.hist(figsize=(20,20))
plt.show()

"""## Preparação dos dados

Transformando dados categóricos em númericos
"""

employee_df = pd.get_dummies(employee_df, columns=['BusinessTravel', 'Department', 'EducationField', 'Gender', 'JobRole', 'MaritalStatus', 'Over18', 'OverTime'], drop_first=True)

employee_df['Attrition'] = employee_df['Attrition'].replace({'Yes': 1, 'No': 0})

print(employee_df.dtypes)

# Calcula a correlação entre as características e a variável alvo
correlation = employee_df.corr()['Attrition']

# Plota um gráfico de barras com as correlações
plt.figure(figsize=(12,6))
sns.barplot(x=correlation.index, y=correlation.values)
plt.xticks(rotation=90)
plt.show()

"""Dividindo dados em teste e treinamento"""

# Seleciona as colunas relevantes
cols = ['Attrition', 'JobInvolvement', 'JobLevel', 'JobSatisfaction', 'MonthlyIncome', 'StockOptionLevel', 
        'TotalWorkingYears', 'YearsAtCompany', 'YearsInCurrentRole', 'YearsWithCurrManager', 
        'BusinessTravel_Travel_Frequently', 'JobRole_Sales Representative', 'MaritalStatus_Single', 'OverTime_Yes']
employee_df = employee_df[cols]

# Calcula a correlação entre as características e a variável alvo
correlation = employee_df.corr()['Attrition']

# Plota um gráfico de barras com as correlações
plt.figure(figsize=(12,6))
sns.barplot(x=correlation.index, y=correlation.values)
plt.xticks(rotation=90)
plt.show()

from sklearn.model_selection import train_test_split

X = employee_df.drop(['Attrition'], axis=1)
y = employee_df['Attrition']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""##Treinamento do modelo

Utilizei a rede neural MLP, não utilizei CNN por ser mais indicado para para lidar com dados sequenciais, e CNN é mais adequado para lidar com imagens por exemplo.
"""

from sklearn.neural_network import MLPClassifier

mlp = MLPClassifier(hidden_layer_sizes=(16,8), activation='relu', solver='adam', max_iter=500)
mlp.fit(X_train, y_train)

"""##Avaliando modelo

Avaliação da acurácia
"""

from sklearn.metrics import accuracy_score

y_pred = mlp.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Acurácia: ", accuracy)

"""Matriz de confusão"""

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True)
plt.show()

"""## Salvar o classificador"""

import pickle

# Salvar o modelo treinado em disco
with open('modelo_treinado.pkl', 'wb') as arquivo:
    pickle.dump(mlp, arquivo)

"""##Aplicação Web"""

!pip install streamlit

import streamlit as st
import pandas as pd
import pickle

# Carregando o modelo treinado
model = pickle.load(open('modelo_treinado.pkl', 'rb'))

# Título da página
st.title('Predição de Rotatividade de Funcionários')

# Descrição do problema
st.markdown('Esta aplicação prevê a rotatividade de funcionários de uma empresa baseada em algumas informações pessoais e profissionais.')

# Criação do formulário
with st.form(key='employee_form'):
    # Criando as colunas do formulário
    col1, col2 = st.beta_columns(2)

    # Adicionando os campos ao formulário
    with col1:
        monthly_income = st.number_input('Renda Mensal (R$):', min_value=0)
        total_working_years = st.number_input('Total de Anos Trabalhados:', min_value=0)
        years_at_company = st.number_input('Anos na Empresa:', min_value=0)
        years_in_current_role = st.number_input('Anos na Posição Atual:', min_value=0)

    with col2:
        job_level = st.selectbox('Nível do Cargo:', ['1', '2', '3', '4', '5'])
        job_involvement = st.selectbox('Envolvimento com o Trabalho:', ['1', '2', '3', '4'])
        job_satisfaction = st.selectbox('Satisfação com o Trabalho:', ['1', '2', '3', '4'])
        stock_option_level = st.selectbox('Nível de Opções de Ações:', ['0', '1', '2', '3'])

    # Adicionando os campos de Business Travel, Job Role, Marital Status e OverTime
    business_travel = st.selectbox('Frequência de Viagens a Negócios:', ['Travel_Rarely', 'Travel_Frequently', 'Non-Travel'])
    job_role = st.selectbox('Cargo:', ['Sales Executive', 'Research Scientist', 'Laboratory Technician', 'Manufacturing Director', 'Healthcare Representative', 'Manager', 'Sales Representative', 'Research Director', 'Human Resources'])
    marital_status = st.selectbox('Estado Civil:', ['Married', 'Single', 'Divorced'])
    over_time = st.selectbox('Trabalha Horas Extras?', ['Yes', 'No'])

    # Botão para submeter os dados
    submit_button = st.form_submit_button(label='Prever')